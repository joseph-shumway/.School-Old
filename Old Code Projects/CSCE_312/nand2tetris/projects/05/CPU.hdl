// File: CPU.hdl
// Author: Joseph Shumway
// Date: 10/25/2021
// Section: 504
// E-mail: joseph.shumway@tamu.edu 
// Description:
// this file implements the CPU chip

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    //--------------- y input of ALU ------------------

    // choose if A or C instruction
    Not(in=instruction[15], out=notAInstruction);
    Mux16(a=dataOut, b=instruction, sel=notAInstruction, out=toARegister);

    // load A register. Outputs either A or M depending on if A instruction or C instruction
    Or(a=notAInstruction, b=instruction[5], out=loadARegister);
    ARegister(in=toARegister, load=loadARegister, out=outA, out[0..14]=addressM);

    // if C instruction, choose a or m from instruction 12
    And(a=instruction[12], b=instruction[15], out=AinAndChooseM);
    Mux16(a=outA, b=inM, sel=AinAndChooseM, out=AorM);

    //----------------x input of ALU ---------------------

    // load D register. Make sure c instruction first
    And(a=instruction[4], b=instruction[15], out=toDRegister);
    DRegister(in=dataOut, load=toDRegister, out=outD);


    //---------------------- ALU --------------------------

    ALU(x=outD, y=AorM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=dataOut, out=outM, zr=zr, ng=ng);
    
    //-----------------------------------------------------

    // write to M?
    And(a=instruction[15], b=instruction[3], out=writeM);
    
    //----------------------- PC --------------------------
    
    // get if positive or not zero
    Not(in=ng, out=positive);
    Not(in=zr, out=notZero);

    // get JGT
    And(a=instruction[15], b=instruction[0], out=JGT);
    
    // check if positive and not zero
    And(a=positive, b=notZero, out=PositiveAndNotZero);

    // first condition to load PC
    And(a=JGT, b=PositiveAndNotZero, out=loadPC1);

    // get JLT
    And(a=instruction[15], b=instruction[2], out=JLT);

    // second condition to load PC
    And(a=JLT, b=ng, out=loadPC2);

    // get JEQ
    And(a=instruction[15], b=instruction[1], out=JEQ);

    // third condition to load PC
    And(a=JEQ, b=zr, out=loadPC3);







    // check if any load conditions are true for PC
    Or(a=loadPC1, b=loadPC2, out=loadPCpart1);
    Or(a=loadPCpart1, b=loadPC3, out=loadPC);
    
    PC(in=outA, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
    
    
}