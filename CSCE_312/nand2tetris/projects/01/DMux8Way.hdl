// File: DMux8Way.hdl
// Author: Joseph Shumway
// Date: 9/14/2021
// Section: 504
// E-mail: joseph.shumway@tamu.edu 
// Description: implements the following logic as a circuit: 8 way Demultiplexor
// --------------------------------------------------------------

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/DMux8Way.hdl

/**
 * 8-way demultiplexor:
 * {a, b, c, d, e, f, g, h} = {in, 0, 0, 0, 0, 0, 0, 0} if sel == 000
 *                            {0, in, 0, 0, 0, 0, 0, 0} if sel == 001
 *                            etc.
 *                            {0, 0, 0, 0, 0, 0, 0, in} if sel == 111
 */

CHIP DMux8Way {
    IN in, sel[3];
    OUT a, b, c, d, e, f, g, h;

    PARTS:
    // Put your code here:

    // same Idea as DMux4Way, but more outputs

    // group x -> (u or v)
    //      group u -> (a or b)
    //      group v -> (c or d)
    

    // group y -> (i or j)
    //      group i -> (e or f)
    //      group j -> (g or h)

    //This narrows down the search like a tree 

    // select based off of first digit (group x or y)
    DMux(in=in, sel=sel[2], a=x, b=y);
    
    // select based off of second digit (group u or v, or i or j)
    DMux(in=x, sel=sel[1], a=u, b=v);
    DMux(in=y, sel=sel[1], a=i, b=j);
    
    // select based off of third digit (output a, b, c, d, e, f, g, or h)
    DMux(in=u, sel=sel[0], a=a, b=b);
    DMux(in=v, sel=sel[0], a=c, b=d);
    DMux(in=i, sel=sel[0], a=e, b=f);
    DMux(in=j, sel=sel[0], a=g, b=h);
    
}