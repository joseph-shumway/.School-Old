// File: RightArithmeticBitshift.hdl
// Author: Joseph Shumway
// Date: 10/4/2021
// Section: 504
// E-mail: joseph.shumway@tamu.edu 
// Description:
// implements a right arithmetic SIPO bitshifter circuit

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/RightArithmeticBitshift.hdl

/**
 * Please read instruction in project document
 * 
 */

CHIP RightArithmeticBitshift {
    IN in, load, reset;
    OUT out[4];

    PARTS:
   // Put you code here:
   
   // determines if load or keep value
   //Mux(a=in, b=wire1, sel=load, out=inL);

   // determines if reset or keep value
   //Mux(a=in, b=false, sel=reset, out=R);

   // if load or reset, change is enabled
//    Or(a=reset, b=load, out=change);
   Mux(a=wire1, b=in, sel=load, out=input);
//    Mux(a=preInput, b=false, sel=reset, out=input);
   
   
   
   // load values into bits
   Mux(a=input, b=false, sel=reset, out=input1);
   Or(a=load, b=reset, out=LR1);
   
   Bit(in=input1, load=LR1, out=out1, out=out[3]);

   DFF(in=load, out=load1);
   Mux(a=out1, b=false, sel=reset, out=out11);
   Or(a=load1, b=reset, out=LR2);
   Bit(in=out11, load=LR2, out=out2, out=out[2]);
    
   DFF(in=load1, out=load2);
   Mux(a=out2, b=false, sel=reset, out=out22);
   Or(a=load2, b=reset, out=LR3);
   Bit(in=out22, load=LR3, out=out3, out=out[1]);

   DFF(in=load2, out=load3);
   Mux(a=out3, b=false, sel=reset, out=out33);
   Or(a=load3, b=reset, out=LR4);
   Bit(in=out33, load=LR4, out=wire1, out=out[0]);
   
}