// File: RAM512.hdl
// Author: Joseph Shumway
// Date: 10/4/2021
// Section: 504
// E-mail: joseph.shumway@tamu.edu 
// Description:
// implements a 512 register RAM circuit

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM512 {
    IN in[16], load, address[9];
    OUT out[16];

    PARTS:
    // Put your code here:

    // same thig as RAM64 but we use multiple RAM64 to make it 512

    DMux8Way(in=load, sel=address[6..8], a=a, b=b, c=c, d=d, e=e, f=f, g=g, h=h);
    
    // begin RAM64 integrations, selecting based off of the least significant digits per RAM
    RAM64(in=in, load=a, address=address[0..5], out=outA);
    RAM64(in=in, load=b, address=address[0..5], out=outB);
    RAM64(in=in, load=c, address=address[0..5], out=outC);
    RAM64(in=in, load=d, address=address[0..5], out=outD);
    RAM64(in=in, load=e, address=address[0..5], out=outE);
    RAM64(in=in, load=f, address=address[0..5], out=outF);
    RAM64(in=in, load=g, address=address[0..5], out=outG);
    RAM64(in=in, load=h, address=address[0..5], out=outH);

    // emit to out
    Mux8Way16(a=outA, b=outB, c=outC, d=outD, e= outE, f=outF, g=outG, h=outH, sel=address[6..8], out=out);
    
    
}