// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/Elevator.hdl
// File: Elevator.hdl
// Author: Joseph Shumway
// Date: 10/4/2021
// Section: 504
// E-mail: joseph.shumway@tamu.edu 
// Description:
// implements the elevator circuit and logic

/**
 *Design an elevator controller with the following specs:
//Assume that the building the elevator is in has 2 floors: F0 and F1. The //elevator has UP and DOWN buttons. When UP is pressed, the elevator goes one //floor up. If the elevator is on F1 and UP is pressed, it stays on F1 and sounds //a BEEP. When DOWN is pressed, the elevator goes one floor down. If the elevator //is on F0 and DOWN is pressed, it stays on F0 and sounds a
//BEEP.If neither UP nor DOWN are pressed, or both UP and DOWN are pressed, the //elevator stays on the current floor.

// u: up, d: down, n: next state, b: beep 
//Hint : Use DFF  to map the present and next state.
// Read description given in Lab 3 document carefully.
 */

CHIP Elevator {
    IN  u, d;
    OUT n, b;
    
	PARTS:
    // Put your code here:

    // Truth Table
    // --------------------------------------------------
    // |_____Input_____||____PS___||____NS___|___out___|
    // |___d___|___u___||____F____||____n____|____b____|
    // |   0   |   0   ||    0    ||    0    |    0    |
    // |   0   |   0   ||    1    ||    1    |    0    |
    // |   0   |   1   ||    0    ||    1    |    0    |
    // |   0   |   1   ||    1    ||    1    |    1    |
    // |   1   |   0   ||    0    ||    0    |    1    |
    // |   1   |   0   ||    1    ||    0    |    0    |
    // |   1   |   1   ||    0    ||    0    |    0    |
    // |   1   |   1   ||    1    ||    1    |    0    |
    // -------------------------------------------------

    // boolean expression for floor logic: 
    // D'F + D'U + UF

    // boolean expression for beep logic:
    // D'UF + DU'F'

    // create DFF and F(Floor)
    DFF(in=traceback, out=F, out=n);
    
    // create equation elements
    Not(in=d, out=notD);
    And(a=notD, b=F, out=notDandF);
    And(a=notD, b=u, out=notDandU);
    And(a=u, b=F, out=UandF);
    
    // create Button Logic
    And(a=notDandU, b=F, out=button1);

    Not(in=u, out=notU);
    And(a=d, b=notU, out=DandnotU);
    Not(in=F, out=notF);
    And(a=DandnotU, b=notF, out=button2);
    Or(a=button1, b=button2, out=b);
    

    // put everything for floor logic together
    Or(a=notDandF, b=notDandU, out=part1);
    Or(a=part1, b=UandF, out=traceback);
    


    
    
    


}
