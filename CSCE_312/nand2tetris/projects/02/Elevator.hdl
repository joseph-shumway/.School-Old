// File: Elevator
// Author: Joseph SHumway
// Date: 9/20/2021
// Section: 504
// E-mail: joseph.shumway@tamu.edu 
// Description:
// implements the Elevator chip

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/Elevator.hdl

/**
 * Design an elevator controller such that the option to go up or down by only one //floor is disabled. Assume that the building the elevator is in has 4 floors. //Your inputs are the current floor and the next requested floor. The output from //the controller should be the next floor to go to.
*Hint: Since there are four floors, you will need 2 bits to represent a floor.
*example: current floor: 01, requested floor: 11, next floor: 11 or
*example: current floor: 00, requested floor: 01, next floor: 00 (disabled condition)
 */

CHIP Elevator {
    IN c[2], r[2];
    OUT next[2];

    PARTS:
    // Put you code here:

    // 4 floors, 2 bits per floor
    // A = c[0]
    // B = c[1]
    // C = r[0]
    // D = r[1]
    // using K map, we get expression: 
    
    // (Not(A and B) and C) 
    // or
    // (Not(A) and (C and D))
    // or 
    // (A and Not(C and D))
    // or
    // ((A and B) and Not(C)

    // in code: 
    // part 1
    And(a=c[0], b=c[1], out=AandB);
    Not(in=AandB, out=notAandB);
    And(a=notAandB, b=r[0], out=NotAandBandC);

    // part 2
    Not(in=c[0], out=notA);
    And(a=r[0], b=r[1], out=CandD);
    And(a=notA, b=CandD, out=notAandCandD);

    // part 3
    Not(in=CandD, out=notCandD);
    And(a=c[0], b=notCandD, out=AandNotCandD);

    // part 4
    Not(in=r[0], out=notC);
    And(a=AandB, b=r[0], out=AandBandNotC);

    // put them all together:
    Or(a=NotAandBandC, b=notAandCandD, out=w1);
    Or(a=AandNotCandD, b=AandBandNotC, out=w2);

    // result = can go to next floor (r)
    Or(a=w1, b=w2, out=canGoNextFloor);

    // set next floor to r if canGoNextFloor, set to c if not
    Mux(a=r[0], b=c[0], sel=canGoNextFloor, out=next[0]);
    Mux(a=r[1], b=c[1], sel=canGoNextFloor, out=next[1]);

    // all done!

}